#!/bin/bash

GREEN='\033[0;32m'
BLUE='\033[1;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No color

# Version of the script
VERSION="1.0.15"

CONFIG_PATH="$HOME/.config/kubectl"

# Variable to store the current config file
CURRENT_KUBECONFIG=""

function scan_yaml_files() {
  YAML_FILES=($(find "$CONFIG_PATH" -maxdepth 1 -type f -name "*.yaml"))
}

function select_config_file() {
  echo -e "${BLUE}Scanning for YAML files in $CONFIG_PATH...${NC}"
  scan_yaml_files
  if [[ ${#YAML_FILES[@]} -eq 0 ]]; then
    echo -e "${RED}No YAML files found in $CONFIG_PATH. Please add files and try again.${NC}"
    exit 1
  fi

  echo "Available YAML configuration files:"
  echo -e "${YELLOW}Type 'q' to go back.${NC}"
  select CONFIG_FILE in "${YAML_FILES[@]}"; do
    if [[ "$REPLY" == "q" ]]; then
      return 1
    elif [[ -n "$CONFIG_FILE" ]]; then
      CURRENT_KUBECONFIG="$CONFIG_FILE"
      break
    else
      echo -e "${RED}Invalid selection. Please try again.${NC}"
    fi
  done
}

function check_kubeconfig_validity() {
  # Try listing namespaces to verify that the config is valid.
  if ! kubectl --kubeconfig "$CURRENT_KUBECONFIG" get namespaces -o jsonpath="{.items[*].metadata.name}" >/dev/null 2>&1; then
    echo -e "${RED}Error: Your Kubernetes configuration file ($CURRENT_KUBECONFIG) is not valid or has expired.
Please update your config file (option 11) or re-authenticate.${NC}"
    return 1
  fi
  return 0
}

function print_menu() {
  echo "================== Kubernetes GUI =================="
  echo -e "${BLUE}Version: ${GREEN}$VERSION${NC}"
  echo -e "${BLUE}Current config file: ${GREEN}$CURRENT_KUBECONFIG${NC}"
  echo "1. Open a shell in a container"
  echo "2. Copy a file or folder from a container"
  echo "3. Copy a file from local to a container"
  echo "4. List pods in a namespace"
  echo "5. Download MySQL backups"
  echo "6. Download all logs"
  echo "7. Download specific log"
  echo "8. Forward a port"
  echo "9. Show huge files"
  echo "10. Scan for expired certificates"
  echo ""
  echo "11. Change config file"
  echo "12. Update script"
  echo ""
  echo "q. Exit"
  echo "==================================================="
}

function get_download_path() {
  CURRENT_DATE=$(date +"%d-%m-%Y")
  BASE_PATH="$HOME/Downloads/kubegui/$NAMESPACE-$POD-$CURRENT_DATE"
  mkdir -p "$BASE_PATH"
  echo "$BASE_PATH"
}

function select_namespace() {
  echo -e "${BLUE}Fetching available namespaces...${NC}"
  NAMESPACES=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" get namespaces -o jsonpath="{.items[*].metadata.name}")
  echo "Available Namespaces:"
  echo -e "${YELLOW}Type 'q' to go back.${NC}"
  select NAMESPACE in $NAMESPACES; do
    if [[ "$REPLY" == "q" ]]; then
      return 1
    elif [[ -n "$NAMESPACE" ]]; then
      break
    else
      echo -e "${RED}Invalid selection. Please try again.${NC}"
    fi
  done
}

function select_pod() {
  local raw name imgs arr short_imgs short_joined lines

  mapfile -t lines < <(
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" get pods \
      -o jsonpath='{range .items[*]}{.metadata.name} ({range .spec.containers[*]}{.image}{","}{end}){"\n"}{end}' \
    | sed 's/,)/)/g'
  )

  POD_NAMES=()
  POD_IMAGES=()
  for raw in "${lines[@]}"; do
    name="${raw%% *}"
    imgs="${raw#* (}"
    imgs="${imgs%)}"
    IFS=',' read -ra arr <<< "$imgs"
    short_imgs=()
    for img in "${arr[@]}"; do
      short_imgs+=( "${img##*/}" )
    done
    short_joined="$(IFS=,; echo "${short_imgs[*]}")"

    POD_NAMES+=( "$name" )
    POD_IMAGES+=( "$short_joined" )
  done

  while true; do
    echo "Available Pods:"
    for i in "${!POD_NAMES[@]}"; do
      printf "%3d) ${GREEN}%s${NC} ${NC}(%s)${NC}\n" \
        $((i+1)) "${POD_NAMES[$i]}" "${POD_IMAGES[$i]}"
    done
    echo -e "${YELLOW}Type the number or 'q' to go back.${NC}"

    read -r REPLY
    if [[ "$REPLY" == "q" ]]; then
      return 1
    elif [[ "$REPLY" =~ ^[0-9]+$ ]] \
         && (( REPLY >= 1 && REPLY <= ${#POD_NAMES[@]} )); then
      POD="${POD_NAMES[$((REPLY-1))]}"
      break
    else
      echo -e "${RED}Invalid selection. Please try again.${NC}"
    fi
  done
}


function open_shell() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi
    echo -e "${BLUE}Opening shell in pod $POD...${NC}"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec -it "$POD" -- /bin/bash
    break
  done
}

function download_with_split() {
  # Arguments:
  #   $1 - Remote path (file or directory)
  #   $2 - Local destination file (or archive)
  #   $3 - Temporary prefix (optional)
  REMOTE_PATH="$1"
  LOCAL_DEST="$2"
  TEMP_PREFIX="${3:-download}"

  # Check if remote path is a directory. If yes, archive it.
  kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- test -d "$REMOTE_PATH" >/dev/null 2>&1
  if [[ $? -eq 0 ]]; then
    echo -e "${BLUE}Remote path $REMOTE_PATH is a directory. Archiving it...${NC}"
    REMOTE_ARCHIVE="/tmp/${TEMP_PREFIX}_archive_$$.tar.gz"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- tar czf "$REMOTE_ARCHIVE" -C "$(dirname "$REMOTE_PATH")" "$(basename "$REMOTE_PATH")" 2>/dev/null || true
    REMOTE_FILE="$REMOTE_ARCHIVE"
    IS_ARCHIVE=1
  else
    REMOTE_FILE="$REMOTE_PATH"
    IS_ARCHIVE=0
  fi

  # Get total file size (in bytes) on the remote side.
  FILE_SIZE=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- stat -c %s "$REMOTE_FILE" 2>/dev/null || true)
  if [[ -z "$FILE_SIZE" ]]; then
    echo -e "${RED}Failed to get file size for $REMOTE_FILE.${NC}"
    return 1
  fi
  FILE_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $FILE_SIZE/1048576}")
  echo -e "${BLUE}Total file size to download: ${FILE_SIZE_MB} MB (${FILE_SIZE} bytes)${NC}"

  # If file is larger than 50MB, split it into 40MB parts.
  if (( FILE_SIZE > 52428800 )); then
    REMOTE_TEMP_DIR="/tmp/${TEMP_PREFIX}_split_$$"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- mkdir -p "$REMOTE_TEMP_DIR" >/dev/null 2>&1 || true
    SPLIT_PREFIX="${REMOTE_TEMP_DIR}/part_"
    echo -e "${BLUE}Splitting file into 40MB parts on pod $POD...${NC}"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- bash -c "split -b 40M -d '$REMOTE_FILE' '${SPLIT_PREFIX}'" 2>/dev/null || true

    # Get list of parts into an array.
    IFS=$'\n' read -rd '' -a parts_array < <(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- ls "$REMOTE_TEMP_DIR" 2>/dev/null || true)
    TOTAL_PARTS=${#parts_array[@]}
    echo -e "${BLUE}Notice: File is split into ${TOTAL_PARTS} parts.${NC}"

    LOCAL_TEMP_DIR=$(mktemp -d)
    for i in "${!parts_array[@]}"; do
      PART="${parts_array[$i]}"
      REMOTE_PART_PATH="${REMOTE_TEMP_DIR}/${PART}"
      LOCAL_PART_PATH="${LOCAL_TEMP_DIR}/${PART}"
      REMOTE_MD5=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- md5sum "$REMOTE_PART_PATH" 2>/dev/null | awk '{print $1}')
      RETRIES=0
      MAX_RETRIES=5
      while true; do
        # Update progress status on one line.
        printf "\r${BLUE}Downloading: %d/%d" $((i+1)) "$TOTAL_PARTS"
        kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" cp "$POD:$REMOTE_PART_PATH" "$LOCAL_PART_PATH" >/dev/null 2>&1
        LOCAL_MD5=$(md5sum "$LOCAL_PART_PATH" 2>/dev/null | awk '{print $1}')
        if [[ "$REMOTE_MD5" == "$LOCAL_MD5" ]]; then
          break
        else
          ((RETRIES++))
          if (( RETRIES >= MAX_RETRIES )); then
            echo -e "\n${RED}Failed to download part ${PART} after multiple attempts.${NC}"
            return 1
          fi
        fi
      done
    done
    echo ""  # Newline after finishing all parts.
    echo -e "${BLUE}All parts downloaded and verified.${NC}"
    echo -e "${BLUE}Concatenating parts into final file $LOCAL_DEST...${NC}"
    cat "${LOCAL_TEMP_DIR}/part_"* > "$LOCAL_DEST"
    rm -rf "$LOCAL_TEMP_DIR"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- rm -rf "$REMOTE_TEMP_DIR" >/dev/null 2>&1 || true
  else
    echo -e "${BLUE}File size is within limits. Using direct kubectl cp.${NC}"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" cp "$POD:$REMOTE_FILE" "$LOCAL_DEST" >/dev/null 2>&1 || true
  fi

  # If an archive was created from a directory, extract it locally and clean up.
  if [[ $IS_ARCHIVE -eq 1 ]]; then
    echo -e "${BLUE}Extracting archive $LOCAL_DEST...${NC}"
    EXTRACT_DIR="${LOCAL_DEST}_extracted"
    mkdir -p "$EXTRACT_DIR"
    tar xzf "$LOCAL_DEST" -C "$EXTRACT_DIR" 2>/dev/null || true
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- rm -f "$REMOTE_ARCHIVE" >/dev/null 2>&1 || true
  fi

  return 0
}

function copy_from_container() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi

    echo -e "${YELLOW}Enter source file or folder path in container:${NC}"
    read SRC_PATH
    DEST_PATH=$(get_download_path)

    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- test -d "$SRC_PATH"
    if [[ $? -eq 0 ]]; then
      echo -e "${BLUE}Downloading directory $SRC_PATH from pod $POD...${NC}"
      download_with_split "$SRC_PATH" "$DEST_PATH/$(basename "$SRC_PATH").tar.gz" "copy_dir"
    else
      FILE_NAME=$(basename "$SRC_PATH")
      echo -e "${BLUE}Downloading file $SRC_PATH from pod $POD...${NC}"
      download_with_split "$SRC_PATH" "$DEST_PATH/$FILE_NAME" "copy_file"
    fi
    echo -e "${GREEN}Download complete. Check the downloaded file(s) in $DEST_PATH${NC}"
    break
  done
}

function download_mysql_backup() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi

    echo -e "${BLUE}Fetching MySQL backup files in /var/lib/mysql/backup from pod $POD...${NC}"
    BACKUP_FILES=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- bash -c "ls -1 /var/lib/mysql/backup 2>/dev/null")
    if [[ -z "$BACKUP_FILES" ]]; then
      echo -e "${RED}No backup files found in /var/lib/mysql/backup.${NC}"
      continue
    fi

    echo "Available Backup Files:"
    IFS=$'\n' BACKUP_FILES_ARRAY=($BACKUP_FILES)
    unset IFS

    for i in "${!BACKUP_FILES_ARRAY[@]}"; do
      FILE_NAME=${BACKUP_FILES_ARRAY[$i]}
      echo "$((i + 1))) $FILE_NAME"
    done

    echo -e "${YELLOW}Select a file to download or type 'q' to go back:${NC}"
    read SELECTED_FILE_INDEX

    if [[ "$SELECTED_FILE_INDEX" == "q" ]]; then
      return
    fi

    if [[ "$SELECTED_FILE_INDEX" =~ ^[0-9]+$ ]] && [[ $SELECTED_FILE_INDEX -ge 1 ]] && [[ $SELECTED_FILE_INDEX -le ${#BACKUP_FILES_ARRAY[@]} ]]; then
      FILE_NAME=${BACKUP_FILES_ARRAY[$((SELECTED_FILE_INDEX - 1))]}
      DEST_PATH=$(get_download_path)
      echo -e "${BLUE}Downloading MySQL backup file $FILE_NAME from pod $POD...${NC}"
      download_with_split "/var/lib/mysql/backup/$FILE_NAME" "$DEST_PATH/$FILE_NAME" "mysql_backup"
    else
      echo -e "${RED}Invalid selection. Please try again.${NC}"
    fi
    break
  done
}

function download_all_logs() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi

    DEST_PATH="$(get_download_path)/logs"
    mkdir -p "$DEST_PATH"

    LOG_DIRS=("/var/www/html/storage/log" "/var/www/html/storage/logs" "/storage/log" "/storage/logs")
    for LOG_DIR in "${LOG_DIRS[@]}"; do
      echo -e "${BLUE}Checking if directory $LOG_DIR exists on pod $POD...${NC}"
      if kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- test -d "$LOG_DIR"; then
        echo -e "${BLUE}Downloading logs from $LOG_DIR on pod $POD...${NC}"
        download_with_split "$LOG_DIR" "$DEST_PATH/$(basename "$LOG_DIR").tar.gz" "logs"
      else
        echo -e "${RED}Directory $LOG_DIR does not exist on pod $POD.${NC}"
      fi
    done
    break
  done
}

function download_specific_log() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi
    while true; do
      echo -e "${BLUE}Fetching log files in /var/www/html/storage/log from pod $POD...${NC}"
      LOG_FILES=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- bash -c "ls -1 /var/www/html/storage/log 2>/dev/null")
      if [[ -z "$LOG_FILES" ]]; then
        echo -e "${RED}No log files found in /var/www/html/storage/log.${NC}"
        return
      fi

      echo "Available Log Files:"
      IFS=$'\n' LOG_FILES_ARRAY=($LOG_FILES)
      unset IFS

      for i in "${!LOG_FILES_ARRAY[@]}"; do
        FILE_NAME=${LOG_FILES_ARRAY[$i]}
        echo "$((i + 1))) $FILE_NAME"
      done

      echo -e "${YELLOW}Select a file to download or type 'q' to go back:${NC}"
      read SELECTED_FILE_INDEX
      if [[ "$SELECTED_FILE_INDEX" == "q" ]]; then
        echo -e "${BLUE}Returning to the main menu.${NC}"
        return
      fi

      if [[ "$SELECTED_FILE_INDEX" =~ ^[0-9]+$ ]] && [[ $SELECTED_FILE_INDEX -ge 1 ]] && [[ $SELECTED_FILE_INDEX -le ${#LOG_FILES_ARRAY[@]} ]]; then
        FILE_NAME=${LOG_FILES_ARRAY[$((SELECTED_FILE_INDEX - 1))]}
        DEST_PATH=$(get_download_path)
        echo -e "${BLUE}Downloading log file $FILE_NAME from pod $POD...${NC}"
        download_with_split "/var/www/html/storage/log/$FILE_NAME" "$DEST_PATH/$FILE_NAME" "log"
      else
        echo -e "${RED}Invalid selection. Please try again.${NC}"
      fi
    done
  done
}

function copy_to_container() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi
    echo -e "${YELLOW}Enter source path on local machine:${NC}"
    read SRC_PATH
    echo -e "${YELLOW}Enter destination path in container:${NC}"
    read DEST_PATH
    echo -e "${BLUE}Copying from $SRC_PATH to $POD:$DEST_PATH...${NC}"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" cp "$SRC_PATH" "$POD:$DEST_PATH"
    break
  done
}

function list_pods() {
  while true; do
    if ! select_namespace; then return; fi
    echo -e "${BLUE}Listing pods in namespace $NAMESPACE...${NC}"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" get pods
    echo -e "${YELLOW}Press Enter to return to the namespace selection menu.${NC}"
    read
  done
}

function change_config_file() {
  echo -e "${BLUE}Change Kubernetes configuration file${NC}"
  if ! select_config_file; then return; fi
}

function port_forward() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi

    echo -e "${YELLOW}Which port do you want to forward from the remote pod (${POD})?${NC}"
    read -p "Remote port: " REMOTE_PORT

    if ! [[ "$REMOTE_PORT" =~ ^[0-9]+$ ]]; then
      echo -e "${RED}Invalid remote port. Please enter a numeric value.${NC}"
      continue
    fi

    echo -e "${YELLOW}Which local port should map to the remote port $REMOTE_PORT?${NC}"
    read -p "Local port: " LOCAL_PORT

    if ! [[ "$LOCAL_PORT" =~ ^[0-9]+$ ]]; then
      echo -e "${RED}Invalid local port. Please enter a numeric value.${NC}"
      continue
    fi

    echo -e "${BLUE}Starting port forwarding from remote pod $POD:$REMOTE_PORT to local machine:$LOCAL_PORT...${NC}"
    echo -e "${GREEN}Press Ctrl+C to stop the port forwarding.${NC}"
    kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" port-forward "$POD" "$LOCAL_PORT:$REMOTE_PORT"
    echo -e "${BLUE}Port forwarding has been stopped.${NC}"
    break
  done
}

function show_huge_files() {
  while true; do
    if ! select_namespace; then return; fi
    if ! select_pod; then continue; fi
    echo -e "${BLUE}Searching for files larger than 1GB on pod $POD...${NC}"
    HUGE_FILES=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$NAMESPACE" exec "$POD" -- bash -c "find / -type f -size +1G -printf '%p %s\n' 2>/dev/null | awk '{printf \"%s %.2f GB\n\", \$1, \$2/(1024*1024*1024)}'")
    if [[ -n "$HUGE_FILES" ]]; then
      echo -e "${GREEN}Huge files found on pod $POD:${NC}"
      echo "$HUGE_FILES"
    fi
    read -r -p $'\nPress Enter to return to the main menu...' dummy
    break
  done
}

function scan_old_certificates() {
  echo -e "${BLUE}Scanning all namespaces and pods for old certificates...${NC}"
  namespaces=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" get namespaces -o jsonpath="{.items[*].metadata.name}")
  for ns in $namespaces; do
    pods=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$ns" get pods -o jsonpath="{.items[*].metadata.name}")
    for pod in $pods; do
      echo -e "${BLUE}Scanning ${GREEN}$ns/$pod${NC}"
      scan_command="now_sec=\$(date +%s); two_months_sec=\$(date -d '+2 months' +%s); find /var/www/html -type f \\( -iname \"*.pem\" -o -iname \"*.crt\" -o -iname \"*.cer\" \\) 2>/dev/null | while read -r file; do end_date=\$(openssl x509 -in \"\$file\" -noout -enddate 2>/dev/null | cut -d= -f2); if [ -n \"\$end_date\" ]; then end_sec=\$(date -d \"\$end_date\" +%s 2>/dev/null); if [ -n \"\$end_sec\" ]; then if [ \"\$end_sec\" -lt \"\$two_months_sec\" ]; then if [ \"\$end_sec\" -lt \"\$now_sec\" ]; then echo \"Certificate in '\$file' is already expired (expired on \$end_date)\"; else echo \"Certificate in '\$file' will become invalid soon (expires on \$end_date)\"; fi; fi; fi; fi; done"
      result=$(kubectl --kubeconfig "$CURRENT_KUBECONFIG" -n "$ns" exec "$pod" -- bash -c "$scan_command" 2>/dev/null)
      if [ $? -ne 0 ]; then
        echo "----------------------------------------"
        continue
      fi
      if [ -n "$result" ]; then
         echo "$result"
      fi
      echo "----------------------------------------"
    done
  done
  echo -e "${BLUE}Scan complete.${NC}"
}

function update_script() {
  echo -e "${BLUE}Checking for updates...${NC}"
  REPO_OWNER="tebulrich"
  REPO_NAME="kubegui"
  FILE_PATH="scripts/kubegui"
  REF="main"
  DOWNLOAD_URL="https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/$REF/$FILE_PATH"
  echo -e "${BLUE}Downloading the latest version...${NC}"
  HTTP_RESPONSE=$(curl -s -w "%{http_code}" "$DOWNLOAD_URL" -o /tmp/kubegui)
  if [[ "$HTTP_RESPONSE" -ne 200 ]]; then
    echo -e "${RED}Failed to download the latest version. HTTP Status: $HTTP_RESPONSE${NC}"
    echo -e "${BLUE}To debug, try running the following command manually:${NC}"
    echo -e "${YELLOW}curl '$DOWNLOAD_URL'${NC}"
    return
  fi
  echo -e "${BLUE}Updating the script...${NC}"
  sudo mv /tmp/kubegui "$0"
  sudo chmod +x "$0"
  echo -e "${GREEN}Update complete! Restarting the script...${NC}"
  exec "$0"
}

# Loop for config selection until a valid config is chosen or the user quits
while true; do
  select_config_file
  if [[ $? -ne 0 ]]; then
    echo -e "${BLUE}Goodbye!${NC}"
    exit 0
  fi

  if check_kubeconfig_validity; then
    break  # Valid config selected; exit the loop.
  else
    echo -e "${YELLOW}Please select a valid configuration file.${NC}"
  fi
done

# Main menu loop
while true; do
  print_menu
  echo -e "${YELLOW}Choose an option (1-12 or q to quit):${NC}"
  read OPTION
  case $OPTION in
    1) open_shell ;;
    2) copy_from_container ;;
    3) copy_to_container ;;
    4) list_pods ;;
    5) download_mysql_backup ;;
    6) download_all_logs ;;
    7) download_specific_log ;;
    8) port_forward ;;
    9) show_huge_files ;;
    10) scan_old_certificates ;;
    11) change_config_file ;;
    12) update_script ;;
    q) echo -e "${BLUE}Goodbye!${NC}"; exit 0 ;;
    *) echo -e "${RED}Invalid option. Please try again.${NC}" ;;
  esac
done
